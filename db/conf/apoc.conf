apoc.uuid.enabled=true
apoc.initializer.neo4j.0=CREATE CONSTRAINT IF NOT EXISTS FOR (n:Author) REQUIRE n.uuid IS UNIQUE
apoc.initializer.neo4j.1=CREATE CONSTRAINT IF NOT EXISTS FOR (n:Book) REQUIRE n.book_id IS UNIQUE
apoc.initializer.neo4j.2=CREATE CONSTRAINT IF NOT EXISTS FOR (n:Genre) REQUIRE n.uuid IS UNIQUE
apoc.initializer.neo4j.3=CREATE CONSTRAINT IF NOT EXISTS FOR (n:Publisher) REQUIRE n.uuid IS UNIQUE
apoc.initializer.neo4j.4=CREATE CONSTRAINT IF NOT EXISTS FOR (n:Tag) REQUIRE n.uuid IS UNIQUE
apoc.initializer.neo4j.5=CREATE CONSTRAINT IF NOT EXISTS FOR (n:User) REQUIRE n.email IS UNIQUE
apoc.initializer.neo4j.6=CALL apoc.uuid.install("Author")
apoc.initializer.neo4j.7=CALL apoc.uuid.install("Publisher")
apoc.initializer.neo4j.8=CALL apoc.uuid.install("Tag")
apoc.initializer.neo4j.9=CALL apoc.load.json("file:////var/lib/neo4j/import/books.json") YIELD value UNWIND value.books as data MERGE (b:Book {book_id: data.book_id, title: data.title, sub_title: data.sub_title, summary: data.summary, publication_year: data.publication_year, edition: data.edition, url: data.url, image: data.image, created_at: data.created_at}) MERGE (p:Publisher {name: data.publisher}) MERGE (p)-[:PUBLISHED]->(b) WITH b,data UNWIND data.tags AS tag MERGE (t:Tag {name: tag}) MERGE (b)-[:HAS_TAG]->(t) WITH b,data UNWIND data.author AS author MERGE (a:Author {name: author}) MERGE (a)-[:WROTE]->(b) MERGE (g:Genre {uuid: data.genre, name: data.genre_name, name_en: data.genre_name_en}) MERGE (b)-[r:IN_GENRE]->(g)
apoc.initializer.neo4j.10=CALL apoc.load.json("file:////var/lib/neo4j/import/user.json") YIELD value UNWIND value.users as data MERGE (u:User {email: data.email, password: data.password, name: data.name})