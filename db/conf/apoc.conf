apoc.initializer.neo4j.0=CALL apoc.cypher.runSchema("CREATE CONSTRAINT FOR (g:Genre) REQUIRE g.name IS UNIQUE", {}) 
apoc.initializer.neo4j.1=CALL apoc.cypher.runSchema("CREATE CONSTRAINT FOR (b:Book) REQUIRE b.title IS UNIQUE", {}) 
apoc.initializer.neo4j.2=CALL apoc.load.json("file:////var/lib/neo4j/import/genres.json") YIELD value UNWIND value.genres as data MERGE (n:Genre {name: data.name, name_en: data.name_en})
apoc.initializer.neo4j.3=CALL apoc.load.json("file:////var/lib/neo4j/import/books.json") YIELD value UNWIND value.books as data MERGE (b:Book {book_id: data.book_id, title: data.title, sub_title: data.sub_title, summary: data.summary, publication_year: data.publication_year, edition: data.edition, url: data.url, created_at: data.created_at}) MERGE (p:Publisher {name: data.publisher}) MERGE (p)-[:PUBLISHED]->(b) MERGE (g:Genre {name: data.genre}) MERGE (b)-[:IN_GENRE]->(g) WITH b,data UNWIND data.tags AS tag MERGE (t:Tag {name: tag}) MERGE (b)-[:HAS_TAG]->(t) WITH b,data UNWIND data.author AS author MERGE (a:Author {name: author}) MERGE (a)-[:WROTE]->(b);